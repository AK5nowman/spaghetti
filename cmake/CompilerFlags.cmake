set(SPAGHETTI_FLAGS)
set(SPAGHETTI_FLAGS_C)
set(SPAGHETTI_FLAGS_CXX)
set(SPAGHETTI_FLAGS_DEBUG)
set(SPAGHETTI_FLAGS_RELEASE)
set(SPAGHETTI_FLAGS_LINKER)
set(SPAGHETTI_DEFINITIONS)
set(SPAGHETTI_DEFINITIONS_DEBUG)
set(SPAGHETTI_DEFINITIONS_RELEASE)
set(SPAGHETTI_WARNINGS)

if (MSVC)
  list(APPEND SPAGHETTI_FLAGS /MP)
  list(APPEND SPAGHETTI_FLAGS_CXX /EHsc /std:c++17)

  list(APPEND SPAGHETTI_DEFINITIONS UNICODE _UNICODE _CRT_SECURE_NO_WARNINGS NOMINMAX)
  list(APPEND SPAGHETTI_DEFINITIONS _SILENCE_CXX17_OLD_ALLOCATOR_MEMBERS_DEPRECATION_WARNING)
  #list(APPEND SPAGHETTI_DEFINITIONS _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS)

  if (SPAGHETTI_ENABLE_ALL_WARNINGS)
    list(APPEND SPAGHETTI_WARNINGS /W3)
  endif ()

  if (SPAGHETTI_TREAT_WARNINGS_AS_ERRORS)
    list(APPEND SPAGHETTI_WARNINGS /WX)
  endif ()
elseif (GCC OR CLANG)
  if (SPAGHETTI_BUILD_NATIVE)
    list(APPEND SPAGHETTI_FLAGS -march=native -mtune=native)
  endif ()

  list(APPEND SPAGHETTI_FLAGS -fPIC -pipe -fvisibility=hidden -fstack-protector -fvisibility-inlines-hidden)
  list(APPEND SPAGHETTI_FLAGS -fdiagnostics-color=always)
  list(APPEND SPAGHETTI_FLAGS -pedantic)

  list(APPEND SPAGHETTI_FLAGS_DEBUG -ggdb3 -O0 -fno-inline -fno-omit-frame-pointer -fno-optimize-sibling-calls)
#  if (UNIX)
#    list(APPEND SPAGHETTI_FLAGS_DEBUG -gz)
#  endif ()
  list(APPEND SPAGHETTI_FLAGS_RELEASE -O3 -flto -fuse-linker-plugin)
  list(APPEND SPAGHETTI_FLAGS_LINKER -Wl,-O1 -Wl,--fatal-warnings -Wl,--discard-all -Wl,--build-id=sha1)

  list(APPEND SPAGHETTI_DEFINITIONS_DEBUG _DEBUG)
  list(APPEND SPAGHETTI_DEFINITIONS_RELEASE NDEBUG)

  if (SPAGHETTI_TREAT_WARNINGS_AS_ERRORS)
    list(APPEND SPAGHETTI_WARNINGS -Werror)
  endif ()

  if (GCC)
    list(APPEND SPAGHETTI_FLAGS_CXX -fdelete-null-pointer-checks -fstrict-aliasing -fipa-pure-const)
  elseif (CLANG)
    list(APPEND SPAGHETTI_FLAGS_CXX -stdlib=libc++)
  endif ()

  if (SPAGHETTI_ENABLE_ALL_WARNINGS)
    if (GCC)
      list(APPEND SPAGHETTI_WARNINGS -Wall -Wextra -Wreturn-type -Wdouble-promotion)
      list(APPEND SPAGHETTI_WARNINGS -Wnull-dereference)
      list(APPEND SPAGHETTI_WARNINGS -Wformat=2 -Wuninitialized -Winit-self -Wmissing-include-dirs)
      list(APPEND SPAGHETTI_WARNINGS -Wmissing-format-attribute -Wsuggest-final-types)
      list(APPEND SPAGHETTI_WARNINGS -Wduplicated-cond -Wshadow)
      list(APPEND SPAGHETTI_WARNINGS -Wsuggest-final-methods)
      list(APPEND SPAGHETTI_WARNINGS -Wsuggest-override)
#      list(APPEND SPAGHETTI_WARNINGS -Wduplicated-branches)
      list(APPEND SPAGHETTI_WARNINGS -Wundef -Wcast-qual -Wcast-align -Wwrite-strings -Wconversion)
      list(APPEND SPAGHETTI_WARNINGS -Wparentheses -Wenum-compare -Wlogical-op)
      list(APPEND SPAGHETTI_WARNINGS -Wlong-long -Wrestrict -Wold-style-cast)
      if (UNIX)
        list(APPEND SPAGHETTI_WARNINGS -Wzero-as-null-pointer-constant)
      endif ()
    elseif (CLANG)
      list(APPEND SPAGHETTI_WARNINGS -Weverything -Wno-c++98-compat -Wno-padded -Wno-exit-time-destructors)
      list(APPEND SPAGHETTI_WARNINGS -Wno-weak-vtables -Wno-global-constructors)
      list(APPEND SPAGHETTI_WARNINGS -Wno-missing-variable-declarations -Wno-float-equal -Wno-switch-enum)
      list(APPEND SPAGHETTI_WARNINGS -Wno-missing-prototypes -Wno-date-time -Wno-unused-command-line-argument)
    endif ()
  endif ()
else ()
  message(FATAL_ERROR "Unknown compiler")
endif ()
